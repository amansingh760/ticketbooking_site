{"ast":null,"code":"var _jsxFileName = \"D:\\\\chat-bot\\\\chatbot-interface\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Chatbot.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst responses = {\n  \"Get a Ticket\": \"Please select \",\n  \"Ticket Prices\": \"The ticket prices are as follows: Adults - $10, Children - $5.\",\n  \"Booking Process\": \"To book a ticket, click on the 'Get a Ticket' link and follow the instructions.\",\n  \"Cancel Ticket\": \"To cancel a ticket, please contact our support team at support@example.com.\",\n  \"Cultural Heritage\": \"India has a rich cultural heritage, including classical dance forms, music, and art. Do you want to learn about a specific aspect?\",\n  \"Dance Forms\": \"India's classical dance forms include Bharatanatyam, Kathak, Kuchipudi, and more.\",\n  \"Music\": \"Indian classical music includes genres like Hindustani and Carnatic music.\",\n  \"Art\": \"Indian art encompasses a wide range of styles, from ancient cave paintings to modern art.\",\n  \"Return to Main Menu\": \"Taking you to the main menus\",\n  \"Exit\": \"Goodbye! Feel free to reopen the chatbot anytime.\",\n  \"Museum Timings\": \"The museum is open from 9 AM to 5 PM daily.\",\n  \"Fare\": \"The fare details are as follows: Adults - $10, Children - $5.\",\n  \"Find My Museum\": \"Please provide your location to find the nearest museum.\",\n  \"Enquiry\": \"What do you want to enquire\"\n};\nconst buttonSets = {\n  default: [\"Get a Ticket\", \"Cultural Heritage\", \"Enquiry\", \"Exit\"],\n  \"Get a Ticket\": [],\n  \"Enquiry\": [\"Museum Timings\", \"Fare\", \"Find My Museum\", \"Return to Main Menu\", \"Exit\"],\n  \"Cultural Heritage\": [\"Dance Forms\", \"Music\", \"Art\", \"Return to Main Menu\", \"Exit\"]\n};\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: \"NAMASTE, How can I assist you?\",\n    sender: 'bot'\n  }]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [currentButtons, setCurrentButtons] = useState('default');\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [selectedOption, setSelectedOption] = useState('');\n  const [options, setOptions] = useState([]);\n  const [isChatbotVisible, setIsChatbotVisible] = useState(true);\n  const [tableData, setTableData] = useState([]);\n  const messagesEndRef = useRef(null);\n\n  // Fetch state options for dropdown\n  useEffect(() => {\n    fetch('http://localhost:5000/state-data').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => {\n      setOptions(data);\n    }).catch(error => {\n      console.error(\"Error fetching state data:\", error);\n    });\n  }, []);\n  const handleSend = () => {\n    if (input.trim()) {\n      const userMessage = {\n        text: input,\n        sender: 'user'\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      setInput('');\n      simulateBotResponse(input);\n    }\n  };\n  const simulateBotResponse = userInput => {\n    setIsTyping(true);\n    setTimeout(() => {\n      const botMessage = {\n        text: getBotResponse(userInput),\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n      setIsTyping(false);\n      if (userInput === \"Exit\") {\n        setIsChatbotVisible(false);\n      }\n      if (userInput === \"Get a Ticket\") {\n        setShowDropdown(true); // Show dropdown on \"Get a Ticket\"\n      } else if (userInput === \"Exit\") {\n        setIsChatbotVisible(false);\n      } else if (buttonSets[userInput]) {\n        setCurrentButtons(userInput);\n        setShowDropdown(false); // Hide dropdown for other buttons\n      }\n      if (userInput === \"Return to Main Menu\") {\n        setCurrentButtons('default');\n      } else if (buttonSets[userInput]) {\n        setCurrentButtons(userInput);\n      }\n    }, 1000);\n  };\n  const getBotResponse = userInput => {\n    return responses[userInput] || \"Sorry, I don't have that information. Can I help you with something else?\";\n  };\n  const quickReply = reply => {\n    const userMessage = {\n      text: reply,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    simulateBotResponse(reply);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const response = await fetch('http://localhost:5000/get-museum-data', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        state: selectedOption\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    setTableData(data);\n  };\n\n  // Scroll to the bottom of the messages when new messages are added\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Render buttons based on current state\n  const renderButtons = () => {\n    var _buttonSets$currentBu;\n    return (_buttonSets$currentBu = buttonSets[currentButtons]) === null || _buttonSets$currentBu === void 0 ? void 0 : _buttonSets$currentBu.map(buttonText => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => quickReply(buttonText),\n      children: buttonText\n    }, buttonText, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: msg.sender,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot typing\",\n          children: \"Bot is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quick-replies\",\n        children: renderButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedOption,\n          onChange: e => setSelectedOption(e.target.value),\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select a state\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option,\n            children: option\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary mt-2\",\n            children: \"Explore\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-container\",\n        children: tableData.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table table-striped table-bordered mt-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            className: \"thead-dark\",\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Museum Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Ticket Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Book ticket\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: tableData.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: row.nameofmuseum\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: row.ticketprice\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: \"./form.html\",\n                  target: \"_blank\",\n                  children: \"click to book\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: /*#__PURE__*/_jsxDEV(Link, {\n                  to: \"/book-ticket\",\n                  target: \"_blank\",\n                  children: \"click to book\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 3\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 41\n              }, this)]\n            }, row._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"YSOtmCreEOZWvyNOy2xh1J42EmU=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","responses","buttonSets","default","Chatbot","_s","messages","setMessages","text","sender","input","setInput","isTyping","setIsTyping","currentButtons","setCurrentButtons","showDropdown","setShowDropdown","selectedOption","setSelectedOption","options","setOptions","isChatbotVisible","setIsChatbotVisible","tableData","setTableData","messagesEndRef","fetch","then","response","ok","Error","json","data","catch","error","console","handleSend","trim","userMessage","prevMessages","simulateBotResponse","userInput","setTimeout","botMessage","getBotResponse","quickReply","reply","handleSubmit","event","preventDefault","method","headers","body","JSON","stringify","state","_messagesEndRef$curre","current","scrollIntoView","behavior","renderButtons","_buttonSets$currentBu","map","buttonText","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","msg","index","ref","onSubmit","value","onChange","e","target","disabled","option","type","length","row","nameofmuseum","ticketprice","href","Link","to","_id","_c","$RefreshReg$"],"sources":["D:/chat-bot/chatbot-interface/src/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Chatbot.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst responses = {\r\n    \"Get a Ticket\": \"Please select \",\r\n    \"Ticket Prices\": \"The ticket prices are as follows: Adults - $10, Children - $5.\",\r\n    \"Booking Process\": \"To book a ticket, click on the 'Get a Ticket' link and follow the instructions.\",\r\n    \"Cancel Ticket\": \"To cancel a ticket, please contact our support team at support@example.com.\",\r\n    \"Cultural Heritage\": \"India has a rich cultural heritage, including classical dance forms, music, and art. Do you want to learn about a specific aspect?\",\r\n    \"Dance Forms\": \"India's classical dance forms include Bharatanatyam, Kathak, Kuchipudi, and more.\",\r\n    \"Music\": \"Indian classical music includes genres like Hindustani and Carnatic music.\",\r\n    \"Art\": \"Indian art encompasses a wide range of styles, from ancient cave paintings to modern art.\",\r\n    \"Return to Main Menu\": \"Taking you to the main menus\",\r\n    \"Exit\": \"Goodbye! Feel free to reopen the chatbot anytime.\",\r\n    \"Museum Timings\": \"The museum is open from 9 AM to 5 PM daily.\",\r\n    \"Fare\": \"The fare details are as follows: Adults - $10, Children - $5.\",\r\n    \"Find My Museum\": \"Please provide your location to find the nearest museum.\",\r\n    \"Enquiry\": \"What do you want to enquire\",\r\n};\r\n\r\nconst buttonSets = {\r\n    default: [\"Get a Ticket\", \"Cultural Heritage\", \"Enquiry\", \"Exit\"],\r\n    \"Get a Ticket\": [],\r\n    \"Enquiry\": [\"Museum Timings\", \"Fare\", \"Find My Museum\", \"Return to Main Menu\", \"Exit\"],\r\n    \"Cultural Heritage\": [\"Dance Forms\", \"Music\", \"Art\", \"Return to Main Menu\", \"Exit\"],\r\n    \r\n};\r\n\r\n\r\nconst Chatbot = () => {\r\n    const [messages, setMessages] = useState([{ text: \"NAMASTE, How can I assist you?\", sender: 'bot' }]);\r\n    const [input, setInput] = useState('');\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const [currentButtons, setCurrentButtons] = useState('default');\r\n    const [showDropdown, setShowDropdown] = useState(false);\r\n    const [selectedOption, setSelectedOption] = useState('');\r\n    const [options, setOptions] = useState([]);\r\n    const [isChatbotVisible , setIsChatbotVisible] = useState(true);\r\n    const [tableData, setTableData] = useState([]);\r\n    const messagesEndRef = useRef(null);\r\n\r\n    // Fetch state options for dropdown\r\n    useEffect(() => {\r\n        fetch('http://localhost:5000/state-data')\r\n            .then((response) => {\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                setOptions(data);\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error fetching state data:\", error);\r\n            });\r\n    }, []);\r\n\r\n    const handleSend = () => {\r\n        if (input.trim()) {\r\n            const userMessage = { text: input, sender: 'user' };\r\n            setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n            setInput('');\r\n            simulateBotResponse(input);\r\n        }\r\n    };\r\n\r\n    const simulateBotResponse = (userInput) => {\r\n        setIsTyping(true);\r\n        setTimeout(() => {\r\n            const botMessage = {\r\n                text: getBotResponse(userInput),\r\n                sender: 'bot',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n            setIsTyping(false);\r\n            if (userInput === \"Exit\") {\r\n                setIsChatbotVisible(false);}\r\n            if (userInput === \"Get a Ticket\") {\r\n                setShowDropdown(true); // Show dropdown on \"Get a Ticket\"\r\n            }\r\n            else if (userInput === \"Exit\") {\r\n                setIsChatbotVisible(false);}\r\n             else if (buttonSets[userInput]) {\r\n                setCurrentButtons(userInput);\r\n                setShowDropdown(false); // Hide dropdown for other buttons\r\n            }\r\n            if (userInput === \"Return to Main Menu\") {\r\n                setCurrentButtons('default');\r\n        \r\n            } else if (buttonSets[userInput]) {\r\n                setCurrentButtons(userInput);\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    const getBotResponse = (userInput) => {\r\n        return responses[userInput] || \"Sorry, I don't have that information. Can I help you with something else?\";\r\n    };\r\n\r\n    const quickReply = (reply) => {\r\n        const userMessage = { text: reply, sender: 'user' };\r\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n        simulateBotResponse(reply);\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const response = await fetch('http://localhost:5000/get-museum-data', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ state: selectedOption }),\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n\r\n        const data = await response.json();\r\n        setTableData(data);\r\n    };\r\n\r\n    // Scroll to the bottom of the messages when new messages are added\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    // Render buttons based on current state\r\n    const renderButtons = () => {\r\n        return (\r\n            buttonSets[currentButtons]?.map((buttonText) => (\r\n                <button key={buttonText} onClick={() => quickReply(buttonText)}>{buttonText}</button>\r\n            ))\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <div className=\"chat-window\">\r\n                <div className=\"messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <div key={index} className={msg.sender}>\r\n                            {msg.text}\r\n                        </div>\r\n                    ))}\r\n                    {isTyping && <div className=\"bot typing\">Bot is typing...</div>}\r\n                    <div ref={messagesEndRef} /> {/* This is the end ref */}\r\n                </div>\r\n                <div className=\"quick-replies\">\r\n                    {renderButtons()}\r\n                </div>\r\n            </div>\r\n            \r\n            {showDropdown && (\r\n                <div className=\"dropdown-container\">\r\n                    <form onSubmit={handleSubmit}>\r\n                        <select\r\n                            value={selectedOption}\r\n                            onChange={(e) => setSelectedOption(e.target.value)}\r\n                            className=\"form-control\"\r\n                        >\r\n                            <option value=\"\" disabled>Select a state</option>\r\n                            {options.map((option, index) => (\r\n                                <option key={index} value={option}>\r\n                                    {option}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                        <center><button type=\"submit\" className=\"btn btn-primary mt-2\" >Explore</button></center>\r\n                    </form>\r\n                    <div className='chatbot-container'>\r\n\r\n                    {tableData.length > 0 && (\r\n                        <table className=\"table table-striped table-bordered mt-3\">\r\n                            <thead className=\"thead-dark\">\r\n                                <tr>\r\n                                    {/*<th>State</th>*/}\r\n                                    <th>Museum Name</th>\r\n                                    {/* <th>District</th> */}\r\n                                    {/* <th>Location</th>\r\n                                     <th>Opening Time</th>\r\n                                    <th>Closing Time</th> */}\r\n                                    <th>Ticket Price</th>\r\n                                    {/* <th>Closing Days</th> */}\r\n                                    <th>Book ticket</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {tableData.map((row) => (\r\n                                    <tr key={row._id}>\r\n                                        {/* <td>{row.state}</td> */}\r\n                                        <td>{row.nameofmuseum}</td>\r\n                                        {/* <td>{row.nameofdistrict}</td>\r\n                                        <td>{row.location}</td>\r\n                                        <td>{row.openingtime}</td>\r\n                                        <td>{row.closingtime}</td> */}\r\n                                        <td>{row.ticketprice}</td>\r\n                                        {/* <td>{row.closingdays}</td> */}\r\n                                        <th><a href=\"./form.html\" target=\"_blank\">click to book</a></th>\r\n                                        <th>\r\n  <Link to=\"/book-ticket\" target=\"_blank\">click to book</Link>\r\n</th>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </table>\r\n                    \r\n                    )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}