{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\chatbot-interface\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Chatbot.css';\nimport SearchBar from './SearchBar'; // Import the SearchBar component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst responses = {\n  \"Get a Ticket\": \"Here’s the link to get your ticket: [Ticket Link]\",\n  \"Quick Guide\": \"You can find the quick guide here: [Guide Link]\",\n  \"Hello\": \"Hi there! How can I help you today?\",\n  \"Help\": \"Sure! What do you need help with?\",\n  \"Bye\": \"Goodbye! Have a great day!\",\n  \"Museum Timings\": \"The museum is open from 10 AM to 6 PM, every day.\",\n  \"Special Exhibits\": \"Currently, we have exhibits on Indian Art and History. Would you like to know more?\",\n  \"Cultural Heritage\": \"India has a rich cultural heritage, including classical dance forms, music, and art. Do you want to learn about a specific aspect?\",\n  \"Famous Monuments\": \"India is home to many famous monuments like the Taj Mahal, Qutub Minar, and Hampi. Would you like details on any of these?\",\n  \"Events This Month\": \"This month, we have a special exhibition on Mughal Architecture. It runs from the 15th to the 30th. Would you like to book a ticket?\"\n};\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const simulateBotResponse = userInput => {\n    setIsTyping(true);\n    setTimeout(() => {\n      const botMessage = {\n        text: getBotResponse(userInput),\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n      setIsTyping(false);\n    }, 1000);\n  };\n  const getBotResponse = userInput => {\n    return responses[userInput] || \"Sorry, I don't have that information. Can I help you with something else?\";\n  };\n  const quickReply = reply => {\n    const userMessage = {\n      text: reply,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    simulateBotResponse(reply);\n  };\n  const handleSearch = query => {\n    if (responses[query]) {\n      const userMessage = {\n        text: query,\n        sender: 'user'\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      simulateBotResponse(query);\n    } else {\n      const userMessage = {\n        text: `No results for \"${query}\"`,\n        sender: 'user'\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n    }\n  };\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: msg.sender,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot typing\",\n          children: \"Bot is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quick-replies\",\n        children: Object.keys(responses).map(key => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(key),\n          children: key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"asL0d45TCMwwlXr2aTjGizIuyRI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","SearchBar","jsxDEV","_jsxDEV","responses","Chatbot","_s","messages","setMessages","isTyping","setIsTyping","messagesEndRef","simulateBotResponse","userInput","setTimeout","botMessage","text","getBotResponse","sender","prevMessages","quickReply","reply","userMessage","handleSearch","query","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","ref","Object","keys","key","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/chatbot-interface/src/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Chatbot.css';\r\nimport SearchBar from './SearchBar'; // Import the SearchBar component\r\n\r\nconst responses = {\r\n    \"Get a Ticket\": \"Here’s the link to get your ticket: [Ticket Link]\",\r\n    \"Quick Guide\": \"You can find the quick guide here: [Guide Link]\",\r\n    \"Hello\": \"Hi there! How can I help you today?\",\r\n    \"Help\": \"Sure! What do you need help with?\",\r\n    \"Bye\": \"Goodbye! Have a great day!\",\r\n    \"Museum Timings\": \"The museum is open from 10 AM to 6 PM, every day.\",\r\n    \"Special Exhibits\": \"Currently, we have exhibits on Indian Art and History. Would you like to know more?\",\r\n    \"Cultural Heritage\": \"India has a rich cultural heritage, including classical dance forms, music, and art. Do you want to learn about a specific aspect?\",\r\n    \"Famous Monuments\": \"India is home to many famous monuments like the Taj Mahal, Qutub Minar, and Hampi. Would you like details on any of these?\",\r\n    \"Events This Month\": \"This month, we have a special exhibition on Mughal Architecture. It runs from the 15th to the 30th. Would you like to book a ticket?\",\r\n};\r\n\r\nconst Chatbot = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const messagesEndRef = useRef(null);\r\n\r\n    const simulateBotResponse = (userInput) => {\r\n        setIsTyping(true);\r\n        setTimeout(() => {\r\n            const botMessage = {\r\n                text: getBotResponse(userInput),\r\n                sender: 'bot',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n            setIsTyping(false);\r\n        }, 1000);\r\n    };\r\n\r\n    const getBotResponse = (userInput) => {\r\n        return responses[userInput] || \"Sorry, I don't have that information. Can I help you with something else?\";\r\n    };\r\n\r\n    const quickReply = (reply) => {\r\n        const userMessage = { text: reply, sender: 'user' };\r\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n        simulateBotResponse(reply);\r\n    };\r\n\r\n    const handleSearch = (query) => {\r\n        if (responses[query]) {\r\n            const userMessage = { text: query, sender: 'user' };\r\n            setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n            simulateBotResponse(query);\r\n        } else {\r\n            const userMessage = { text: `No results for \"${query}\"`, sender: 'user' };\r\n            setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <SearchBar onSearch={handleSearch} /> {/* Add SearchBar here */}\r\n            <div className=\"chat-window\">\r\n                <div className=\"messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <div key={index} className={msg.sender}>\r\n                            {msg.text}\r\n                        </div>\r\n                    ))}\r\n                    {isTyping && <div className=\"bot typing\">Bot is typing...</div>}\r\n                    <div ref={messagesEndRef} /> {/* Scroll reference */}\r\n                </div>\r\n                <div className=\"quick-replies\">\r\n                    {Object.keys(responses).map((key) => (\r\n                        <button key={key} onClick={() => quickReply(key)}>\r\n                            {key}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}