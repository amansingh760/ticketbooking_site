{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\chatbot-interface\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [ticketId, setTicketId] = useState(null);\n  useEffect(() => {\n    // Initialize the chatbot with a new ticket ID  \n    axios.post('/api/tickets', {}).then(response => {\n      setTicketId(response.data.ticketId);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  const handleSendMessage = () => {\n    // Send a new message to the chatbot  \n    axios.post('/api/messages', {\n      ticketId,\n      message: newMessage\n    }).then(response => {\n      setMessages([...messages, response.data]);\n      setNewMessage('');\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  const handleReceiveMessage = () => {\n    // Receive a new message from the chatbot  \n    axios.get('/api/messages', {\n      params: {\n        ticketId\n      }\n    }).then(response => {\n      setMessages([...messages, response.data]);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chatbot Ticketing System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 8\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newMessage,\n      onChange: e => setNewMessage(e.target.value),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReceiveMessage,\n      children: \"Receive\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 4\n  }, this);\n};\n_s(App, \"j3uGxR50TQk3Rndzim0NMYv84TA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","messages","setMessages","newMessage","setNewMessage","ticketId","setTicketId","post","then","response","data","catch","error","console","handleSendMessage","message","handleReceiveMessage","get","params","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HP/chatbot-interface/src/Chatbot.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';  \r\nimport axios from 'axios';  \r\n  \r\nconst App = () => {  \r\n  const [messages, setMessages] = useState([]);  \r\n  const [newMessage, setNewMessage] = useState('');  \r\n  const [ticketId, setTicketId] = useState(null);  \r\n  useEffect(() => {  \r\n   // Initialize the chatbot with a new ticket ID  \r\n   axios.post('/api/tickets', {})  \r\n    .then(response => {  \r\n      setTicketId(response.data.ticketId);  \r\n    })  \r\n    .catch(error => {  \r\n      console.error(error);  \r\n    });  \r\n  }, []);  \r\n  \r\n  const handleSendMessage = () => {  \r\n   // Send a new message to the chatbot  \r\n   axios.post('/api/messages', {  \r\n    ticketId,  \r\n    message: newMessage,  \r\n   })  \r\n    .then(response => {  \r\n      setMessages([...messages, response.data]);  \r\n      setNewMessage('');  \r\n    })  \r\n    .catch(error => {  \r\n      console.error(error);  \r\n    });  \r\n  };  \r\n  \r\n  const handleReceiveMessage = () => {  \r\n   // Receive a new message from the chatbot  \r\n   axios.get('/api/messages', {  \r\n    params: {  \r\n      ticketId,  \r\n    },  \r\n   })  \r\n    .then(response => {  \r\n      setMessages([...messages, response.data]);  \r\n    })  \r\n    .catch(error => {  \r\n      console.error(error);  \r\n    });  \r\n  };  \r\n  \r\n  return (  \r\n   <div>  \r\n    <h1>Chatbot Ticketing System</h1>  \r\n    <ul>  \r\n      {messages.map((message, index) => (  \r\n       <li key={index}>{message}</li>  \r\n      ))}  \r\n    </ul>  \r\n    <input  \r\n      type=\"text\"  \r\n      value={newMessage}  \r\n      onChange={e => setNewMessage(e.target.value)}  \r\n      placeholder=\"Type a message...\"  \r\n    />  \r\n    <button onClick={handleSendMessage}>Send</button>  \r\n    <button onClick={handleReceiveMessage}>Receive</button>  \r\n   </div>  \r\n  );  \r\n};  \r\n  \r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}