{"ast":null,"code":"var _jsxFileName = \"D:\\\\chat-bot\\\\chatbot-interface\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst responses = {\n  \"Get a Ticket\": \"Please select \",\n  \"Ticket Prices\": \"The ticket prices are as follows: Adults - $10, Children - $5.\",\n  \"Booking Process\": \"To book a ticket, click on the 'Get a Ticket' link and follow the instructions.\",\n  \"Cancel Ticket\": \"To cancel a ticket, please contact our support team at support@example.com.\",\n  \"Cultural Heritage\": \"India has a rich cultural heritage, including classical dance forms, music, and art. Do you want to learn about a specific aspect?\",\n  \"Dance Forms\": \"India's classical dance forms include Bharatanatyam, Kathak, Kuchipudi, and more.\",\n  \"Music\": \"Indian classical music includes genres like Hindustani and Carnatic music.\",\n  \"Art\": \"Indian art encompasses a wide range of styles, from ancient cave paintings to modern art.\",\n  \"Return to Main Menu\": \"Taking you to the main menus\",\n  \"Exit\": \"Goodbye! Feel free to reopen the chatbot anytime.\",\n  \"Museum Timings\": \"The museum is open from 9 AM to 5 PM daily.\",\n  \"Fare\": \"The fare details are as follows: Adults - $10, Children - $5.\",\n  \"Find My Museum\": \"Please provide your location to find the nearest museum.\",\n  \"Enquiry\": \"What do you want to enquire\"\n};\nconst buttonSets = {\n  default: [\"Get a Ticket\", \"Cultural Heritage\", \"Enquiry\", \"Exit\"],\n  \"Get a Ticket\": [\"Ticket Prices\", \"Booking Process\", \"Cancel Ticket\", \"Return to Main Menu\", \"Exit\"],\n  \"Enquiry\": [\"Museum Timings\", \"Fare\", \"Find My Museum\", \"Return to Main Menu\", \"Exit\"],\n  \"Cultural Heritage\": [\"Dance Forms\", \"Music\", \"Art\", \"Return to Main Menu\", \"Exit\"]\n};\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: \"NAMASTE, How can I assist you?\",\n    sender: 'bot'\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [currentButtons, setCurrentButtons] = useState('default');\n  const [isChatbotVisible, setIsChatbotVisible] = useState(true);\n  const messagesEndRef = useRef(null);\n  const simulateBotResponse = userInput => {\n    setIsTyping(true);\n    setTimeout(() => {\n      const botMessage = {\n        text: getBotResponse(userInput),\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n      setIsTyping(false);\n      if (userInput === \"Return to Main Menu\") {\n        setCurrentButtons('default');\n      } else if (userInput === \"Exit\") {\n        setIsChatbotVisible(false);\n      } else if (buttonSets[userInput]) {\n        setCurrentButtons(userInput);\n      }\n    }, 1000);\n  };\n  const getBotResponse = userInput => {\n    return responses[userInput] || \"Sorry, I don't have that information. Can I help you with something else?\";\n  };\n  const quickReply = reply => {\n    const userMessage = {\n      text: reply,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    simulateBotResponse(reply);\n  };\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const renderButtons = () => {\n    var _buttonSets$currentBu;\n    return (_buttonSets$currentBu = buttonSets[currentButtons]) === null || _buttonSets$currentBu === void 0 ? void 0 : _buttonSets$currentBu.map(buttonText => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => quickReply(buttonText),\n      children: buttonText\n    }, buttonText, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this));\n  };\n  if (!isChatbotVisible) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: msg.sender,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot typing\",\n          children: \"Bot is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quick-replies\",\n        children: renderButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n// Fetch state options for dropdown\n_s(Chatbot, \"a1vmta7A+igJKWu7Y3oj9QfqixI=\");\n_c = Chatbot;\nuseEffect(() => {\n  fetch('http://localhost:5000/state-data').then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).then(data => {\n    setOptions(data);\n  }).catch(error => {\n    console.error(\"Error fetching state data:\", error);\n  });\n}, []);\nconst handleSend = () => {\n  if (input.trim()) {\n    const userMessage = {\n      text: input,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInput('');\n    simulateBotResponse(input);\n  }\n};\nconst simulateBotResponse = userInput => {\n  setIsTyping(true);\n  setTimeout(() => {\n    const botMessage = {\n      text: getBotResponse(userInput),\n      sender: 'bot'\n    };\n    setMessages(prevMessages => [...prevMessages, botMessage]);\n    setIsTyping(false);\n    if (userInput === \"Get a Ticket\") {\n      setShowDropdown(true); // Show dropdown on \"Get a Ticket\"\n    } else if (buttonSets[userInput]) {\n      setCurrentButtons(userInput);\n      setShowDropdown(false); // Hide dropdown for other buttons\n    }\n  }, 1000);\n};\nconst getBotResponse = userInput => {\n  return responses[userInput] || \"Sorry, I don't have that information. Can I help you with something else?\";\n};\nconst quickReply = reply => {\n  const userMessage = {\n    text: reply,\n    sender: 'user'\n  };\n  setMessages(prevMessages => [...prevMessages, userMessage]);\n  simulateBotResponse(reply);\n};\nconst handleSubmit = async event => {\n  event.preventDefault();\n  const response = await fetch('http://localhost:5000/get-museum-data', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      state: selectedOption\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Network response was not ok');\n  }\n  const data = await response.json();\n  setTableData(data);\n};\n\n// Scroll to the bottom of the messages when new messages are added\nuseEffect(() => {\n  var _messagesEndRef$curre2;\n  (_messagesEndRef$curre2 = messagesEndRef.current) === null || _messagesEndRef$curre2 === void 0 ? void 0 : _messagesEndRef$curre2.scrollIntoView({\n    behavior: \"smooth\"\n  });\n}, [messages]);\n\n// Render buttons based on current state\nconst renderButtons = () => {\n  var _buttonSets$currentBu2;\n  return (_buttonSets$currentBu2 = buttonSets[currentButtons]) === null || _buttonSets$currentBu2 === void 0 ? void 0 : _buttonSets$currentBu2.map(buttonText => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => quickReply(buttonText),\n    children: buttonText\n  }, buttonText, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 13\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: msg.sender,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot typing\",\n          children: \"Bot is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 17\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quick-replies\",\n        children: renderButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this), showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedOption,\n          onChange: e => setSelectedOption(e.target.value),\n          className: \"form-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select a state\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 25\n          }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option,\n            children: option\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary mt-2\",\n          children: \"Explore\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), tableData.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-striped table-bordered mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"thead-dark\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Museum Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Ticket Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Book ticket\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableData.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.nameofmuseum\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: row.ticketprice\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"https://www.google.com\",\n                children: \"Google\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 37\n            }, this)]\n          }, row._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","responses","buttonSets","default","Chatbot","_s","messages","setMessages","text","sender","isTyping","setIsTyping","currentButtons","setCurrentButtons","isChatbotVisible","setIsChatbotVisible","messagesEndRef","simulateBotResponse","userInput","setTimeout","botMessage","getBotResponse","prevMessages","quickReply","reply","userMessage","_messagesEndRef$curre","current","scrollIntoView","behavior","renderButtons","_buttonSets$currentBu","map","buttonText","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","msg","index","ref","_c","fetch","then","response","ok","Error","json","data","setOptions","catch","error","console","handleSend","input","trim","setInput","setShowDropdown","handleSubmit","event","preventDefault","method","headers","body","JSON","stringify","state","selectedOption","setTableData","_messagesEndRef$curre2","_buttonSets$currentBu2","showDropdown","onSubmit","value","onChange","e","setSelectedOption","target","disabled","options","option","type","tableData","length","row","nameofmuseum","ticketprice","href","_id","$RefreshReg$"],"sources":["D:/chat-bot/chatbot-interface/src/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Chatbot.css';\r\n\r\nconst responses = {\r\n    \"Get a Ticket\": \"Please select \",\r\n    \"Ticket Prices\": \"The ticket prices are as follows: Adults - $10, Children - $5.\",\r\n    \"Booking Process\": \"To book a ticket, click on the 'Get a Ticket' link and follow the instructions.\",\r\n    \"Cancel Ticket\": \"To cancel a ticket, please contact our support team at support@example.com.\",\r\n    \"Cultural Heritage\": \"India has a rich cultural heritage, including classical dance forms, music, and art. Do you want to learn about a specific aspect?\",\r\n    \"Dance Forms\": \"India's classical dance forms include Bharatanatyam, Kathak, Kuchipudi, and more.\",\r\n    \"Music\": \"Indian classical music includes genres like Hindustani and Carnatic music.\",\r\n    \"Art\": \"Indian art encompasses a wide range of styles, from ancient cave paintings to modern art.\",\r\n    \"Return to Main Menu\": \"Taking you to the main menus\",\r\n    \"Exit\": \"Goodbye! Feel free to reopen the chatbot anytime.\",\r\n    \"Museum Timings\": \"The museum is open from 9 AM to 5 PM daily.\",\r\n    \"Fare\": \"The fare details are as follows: Adults - $10, Children - $5.\",\r\n    \"Find My Museum\": \"Please provide your location to find the nearest museum.\",\r\n    \"Enquiry\": \"What do you want to enquire\",\r\n};\r\n\r\nconst buttonSets = {\r\n    default: [\"Get a Ticket\", \"Cultural Heritage\", \"Enquiry\", \"Exit\"],\r\n    \"Get a Ticket\": [\"Ticket Prices\", \"Booking Process\", \"Cancel Ticket\", \"Return to Main Menu\", \"Exit\"],\r\n    \"Enquiry\": [\"Museum Timings\", \"Fare\", \"Find My Museum\", \"Return to Main Menu\", \"Exit\"],\r\n    \"Cultural Heritage\": [\"Dance Forms\", \"Music\", \"Art\", \"Return to Main Menu\", \"Exit\"],\r\n    \r\n};\r\n\r\nconst Chatbot = () => {\r\n    const [messages, setMessages] = useState([{ text: \"NAMASTE, How can I assist you?\", sender: 'bot' }]);\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const [currentButtons, setCurrentButtons] = useState('default');\r\n    const [isChatbotVisible, setIsChatbotVisible] = useState(true);\r\n    const messagesEndRef = useRef(null);\r\n\r\n    const simulateBotResponse = (userInput) => {\r\n        setIsTyping(true);\r\n        setTimeout(() => {\r\n            const botMessage = {\r\n                text: getBotResponse(userInput),\r\n                sender: 'bot',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n            setIsTyping(false);\r\n            if (userInput === \"Return to Main Menu\") {\r\n                setCurrentButtons('default');\r\n            } else if (userInput === \"Exit\") {\r\n                setIsChatbotVisible(false);\r\n            } else if (buttonSets[userInput]) {\r\n                setCurrentButtons(userInput);\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    const getBotResponse = (userInput) => {\r\n        return responses[userInput] || \"Sorry, I don't have that information. Can I help you with something else?\";\r\n    };\r\n\r\n    const quickReply = (reply) => {\r\n        const userMessage = { text: reply, sender: 'user' };\r\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n        simulateBotResponse(reply);\r\n    };\r\n\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    const renderButtons = () => {\r\n        return buttonSets[currentButtons]?.map((buttonText) => (\r\n            <button key={buttonText} onClick={() => quickReply(buttonText)}>\r\n                {buttonText}\r\n            </button>\r\n        ));\r\n    };\r\n\r\n    if (!isChatbotVisible) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <div className=\"chat-window\">\r\n                <div className=\"messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <div key={index} className={msg.sender}>\r\n                            {msg.text}\r\n                        </div>\r\n                    ))}\r\n                    {isTyping && <div className=\"bot typing\">Bot is typing...</div>}\r\n                    <div ref={messagesEndRef} />\r\n                </div>\r\n                <div className=\"quick-replies\">\r\n                    {renderButtons()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Fetch state options for dropdown\r\nuseEffect(() => {\r\n    fetch('http://localhost:5000/state-data')\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            return response.json();\r\n        })\r\n        .then((data) => {\r\n            setOptions(data);\r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Error fetching state data:\", error);\r\n        });\r\n}, []);\r\n\r\nconst handleSend = () => {\r\n    if (input.trim()) {\r\n        const userMessage = { text: input, sender: 'user' };\r\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n        setInput('');\r\n        simulateBotResponse(input);\r\n    }\r\n};\r\n\r\nconst simulateBotResponse = (userInput) => {\r\n    setIsTyping(true);\r\n    setTimeout(() => {\r\n        const botMessage = {\r\n            text: getBotResponse(userInput),\r\n            sender: 'bot',\r\n        };\r\n        setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n        setIsTyping(false);\r\n        if (userInput === \"Get a Ticket\") {\r\n            setShowDropdown(true); // Show dropdown on \"Get a Ticket\"\r\n        } else if (buttonSets[userInput]) {\r\n            setCurrentButtons(userInput);\r\n            setShowDropdown(false); // Hide dropdown for other buttons\r\n        }\r\n    }, 1000);\r\n};\r\n\r\nconst getBotResponse = (userInput) => {\r\n    return responses[userInput] || \"Sorry, I don't have that information. Can I help you with something else?\";\r\n};\r\n\r\nconst quickReply = (reply) => {\r\n    const userMessage = { text: reply, sender: 'user' };\r\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n    simulateBotResponse(reply);\r\n};\r\n\r\nconst handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const response = await fetch('http://localhost:5000/get-museum-data', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ state: selectedOption }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n    }\r\n\r\n    const data = await response.json();\r\n    setTableData(data);\r\n};\r\n\r\n// Scroll to the bottom of the messages when new messages are added\r\nuseEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n}, [messages]);\r\n\r\n// Render buttons based on current state\r\nconst renderButtons = () => {\r\n    return (\r\n        buttonSets[currentButtons]?.map((buttonText) => (\r\n            <button key={buttonText} onClick={() => quickReply(buttonText)}>{buttonText}</button>\r\n        ))\r\n    );\r\n\r\n\r\nreturn (\r\n    <div className=\"chatbot-container\">\r\n        <div className=\"chat-window\">\r\n            <div className=\"messages\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={msg.sender}>\r\n                        {msg.text}\r\n                    </div>\r\n                ))}\r\n                {isTyping && <div className=\"bot typing\">Bot is typing...</div>}\r\n                <div ref={messagesEndRef} /> {/* This is the end ref */}\r\n            </div>\r\n            <div className=\"quick-replies\">\r\n                {renderButtons()}\r\n            </div>\r\n        </div>\r\n        \r\n        {showDropdown && (\r\n            <div className=\"dropdown-container\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <select\r\n                        value={selectedOption}\r\n                        onChange={(e) => setSelectedOption(e.target.value)}\r\n                        className=\"form-control\"\r\n                    >\r\n                        <option value=\"\" disabled>Select a state</option>\r\n                        {options.map((option, index) => (\r\n                            <option key={index} value={option}>\r\n                                {option}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <button type=\"submit\" className=\"btn btn-primary mt-2\">Explore</button>\r\n                </form>\r\n\r\n                {tableData.length > 0 && (\r\n                    <table className=\"table table-striped table-bordered mt-3\">\r\n                        <thead className=\"thead-dark\">\r\n                            <tr>\r\n                                {/*<th>State</th>*/}\r\n                                <th>Museum Name</th>\r\n                                {/* <th>District</th> */}\r\n                                {/* <th>Location</th>\r\n                                 <th>Opening Time</th>\r\n                                <th>Closing Time</th> */}\r\n                                <th>Ticket Price</th>\r\n                                {/* <th>Closing Days</th> */}\r\n                                <th>Book ticket</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {tableData.map((row) => (\r\n                                <tr key={row._id}>\r\n                                    {/* <td>{row.state}</td> */}\r\n                                    <td>{row.nameofmuseum}</td>\r\n                                    {/* <td>{row.nameofdistrict}</td>\r\n                                    <td>{row.location}</td>\r\n                                    <td>{row.openingtime}</td>\r\n                                    <td>{row.closingtime}</td> */}\r\n                                    <td>{row.ticketprice}</td>\r\n                                    {/* <td>{row.closingdays}</td> */}\r\n                                    <th><a href=\"https://www.google.com\">Google</a></th>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                )}\r\n            </div>\r\n        )}\r\n    </div>\r\n);\r\n};\r\n\r\n\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}