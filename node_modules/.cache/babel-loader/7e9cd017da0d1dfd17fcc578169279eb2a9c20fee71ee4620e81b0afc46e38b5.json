{"ast":null,"code":"var _jsxFileName = \"D:\\\\chat-bot\\\\chatbot-interface\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Chatbot.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst responses = {\n  \"Get a Ticket\": \"Please select \",\n  \"Ticket Prices\": \"The ticket prices are as follows: Adults - $10, Children - $5.\",\n  \"Booking Process\": \"To book a ticket, click on the 'Get a Ticket' link and follow the instructions.\",\n  \"Cancel Ticket\": \"To cancel a ticket, please contact our support team at support@example.com.\",\n  \"Cultural Heritage\": \"India has a rich cultural heritage, including classical dance forms, music, and art. Do you want to learn about a specific aspect?\",\n  \"Dance Forms\": \"India's classical dance forms include Bharatanatyam, Kathak, Kuchipudi, and more.\",\n  \"Music\": \"Indian classical music includes genres like Hindustani and Carnatic music.\",\n  \"Art\": \"Indian art encompasses a wide range of styles, from ancient cave paintings to modern art.\",\n  \"Return to Main Menu\": \"Taking you to the main menus\",\n  \"Exit\": \"Goodbye! Feel free to reopen the chatbot anytime.\",\n  \"Museum Timings\": \"The museum is open from 9 AM to 5 PM daily.\",\n  \"Fare\": \"The fare details are as follows: Adults - $10, Children - $5.\",\n  \"Find My Museum\": \"Please provide your location to find the nearest museum.\",\n  \"Enquiry\": \"What do you want to enquire\"\n};\nconst buttonSets = {\n  default: [\"Get a Ticket\", \"Cultural Heritage\", \"Enquiry\", \"Exit\"],\n  \"Get a Ticket\": [],\n  \"Enquiry\": [\"Museum Timings\", \"Fare\", \"Find My Museum\", \"Return to Main Menu\", \"Exit\"],\n  \"Cultural Heritage\": [\"Dance Forms\", \"Music\", \"Art\", \"Return to Main Menu\", \"Exit\"]\n};\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: \"NAMASTE, How can I assist you?\",\n    sender: 'bot'\n  }]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [currentButtons, setCurrentButtons] = useState('default');\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [selectedOption, setSelectedOption] = useState('');\n  const [options, setOptions] = useState([]);\n  const [isChatbotVisible, setIsChatbotVisible] = useState(true);\n  const [tableData, setTableData] = useState([]);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    fetch('http://localhost:5000/state-data').then(response => {\n      if (!response.ok) throw new Error('Network response was not ok');\n      return response.json();\n    }).then(data => setOptions(data)).catch(error => console.error(\"Error fetching state data:\", error));\n  }, []);\n  const handleSend = () => {\n    if (input.trim()) {\n      const userMessage = {\n        text: input,\n        sender: 'user'\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      setInput('');\n      simulateBotResponse(input);\n    }\n  };\n  const simulateBotResponse = userInput => {\n    setIsTyping(true);\n    setTimeout(() => {\n      const botMessage = {\n        text: getBotResponse(userInput),\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n      setIsTyping(false);\n      if (userInput === \"Exit\") {\n        setIsChatbotVisible(false);\n      } else if (userInput === \"Get a Ticket\") {\n        setShowDropdown(true);\n      } else if (buttonSets[userInput]) {\n        setCurrentButtons(userInput);\n        setShowDropdown(false);\n      }\n      if (userInput === \"Return to Main Menu\") {\n        setCurrentButtons('default');\n      }\n    }, 1000);\n  };\n  const getBotResponse = userInput => {\n    return responses[userInput] || \"Sorry, I don't have that information. Can I help you with something else?\";\n  };\n  const quickReply = reply => {\n    const userMessage = {\n      text: reply,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    simulateBotResponse(reply);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const response = await fetch('http://localhost:5000/get-museum-data', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        state: selectedOption\n      })\n    });\n    if (!response.ok) throw new Error('Network response was not ok');\n    const data = await response.json();\n    setTableData(data);\n  };\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const renderButtons = () => {\n    var _buttonSets$currentBu;\n    return (_buttonSets$currentBu = buttonSets[currentButtons]) === null || _buttonSets$currentBu === void 0 ? void 0 : _buttonSets$currentBu.map(buttonText => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => quickReply(buttonText),\n      children: buttonText\n    }, buttonText, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isChatbotVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-chatbot\",\n        onClick: () => setIsChatbotVisible(false),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-window\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: msg.sender,\n            children: msg.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 33\n          }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bot typing\",\n            children: \"Bot is typing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 42\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quick-replies\",\n          children: renderButtons()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }, this), showDropdown && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedOption,\n            onChange: e => setSelectedOption(e.target.value),\n            className: \"form-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a state\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 37\n            }, this), options.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option,\n              children: option\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-primary mt-2\",\n              children: \"Explore\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatbot-container\",\n          children: tableData.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table table-striped table-bordered mt-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              className: \"thead-dark\",\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Museum Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Ticket Price\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Book ticket\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: tableData.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: row.nameofmuseum\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: row.ticketprice\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    onClick: () => window.open(`/form.html?price=${row.ticketprice}&museum=${encodeURIComponent(row.nameofmuseum)}`, '_blank'),\n                    className: \"btn btn-success btn-sm\",\n                    children: \"Book Ticket\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 57\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 53\n                }, this)]\n              }, row._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 49\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n_s(Chatbot, \"RObefGHJAhzn7N7y2xi5cA7B13k=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","responses","buttonSets","default","Chatbot","_s","messages","setMessages","text","sender","input","setInput","isTyping","setIsTyping","currentButtons","setCurrentButtons","showDropdown","setShowDropdown","selectedOption","setSelectedOption","options","setOptions","isChatbotVisible","setIsChatbotVisible","tableData","setTableData","messagesEndRef","fetch","then","response","ok","Error","json","data","catch","error","console","handleSend","trim","userMessage","prevMessages","simulateBotResponse","userInput","setTimeout","botMessage","getBotResponse","quickReply","reply","handleSubmit","event","preventDefault","method","headers","body","JSON","stringify","state","_messagesEndRef$curre","current","scrollIntoView","behavior","renderButtons","_buttonSets$currentBu","map","buttonText","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","msg","index","ref","onSubmit","value","onChange","e","target","disabled","option","type","length","row","nameofmuseum","ticketprice","window","open","encodeURIComponent","_id","_c","$RefreshReg$"],"sources":["D:/chat-bot/chatbot-interface/src/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Chatbot.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst responses = {\r\n    \"Get a Ticket\": \"Please select \",\r\n    \"Ticket Prices\": \"The ticket prices are as follows: Adults - $10, Children - $5.\",\r\n    \"Booking Process\": \"To book a ticket, click on the 'Get a Ticket' link and follow the instructions.\",\r\n    \"Cancel Ticket\": \"To cancel a ticket, please contact our support team at support@example.com.\",\r\n    \"Cultural Heritage\": \"India has a rich cultural heritage, including classical dance forms, music, and art. Do you want to learn about a specific aspect?\",\r\n    \"Dance Forms\": \"India's classical dance forms include Bharatanatyam, Kathak, Kuchipudi, and more.\",\r\n    \"Music\": \"Indian classical music includes genres like Hindustani and Carnatic music.\",\r\n    \"Art\": \"Indian art encompasses a wide range of styles, from ancient cave paintings to modern art.\",\r\n    \"Return to Main Menu\": \"Taking you to the main menus\",\r\n    \"Exit\": \"Goodbye! Feel free to reopen the chatbot anytime.\",\r\n    \"Museum Timings\": \"The museum is open from 9 AM to 5 PM daily.\",\r\n    \"Fare\": \"The fare details are as follows: Adults - $10, Children - $5.\",\r\n    \"Find My Museum\": \"Please provide your location to find the nearest museum.\",\r\n    \"Enquiry\": \"What do you want to enquire\",\r\n};\r\n\r\nconst buttonSets = {\r\n    default: [\"Get a Ticket\", \"Cultural Heritage\", \"Enquiry\", \"Exit\"],\r\n    \"Get a Ticket\": [],\r\n    \"Enquiry\": [\"Museum Timings\", \"Fare\", \"Find My Museum\", \"Return to Main Menu\", \"Exit\"],\r\n    \"Cultural Heritage\": [\"Dance Forms\", \"Music\", \"Art\", \"Return to Main Menu\", \"Exit\"],\r\n};\r\n\r\nconst Chatbot = () => {\r\n    const [messages, setMessages] = useState([{ text: \"NAMASTE, How can I assist you?\", sender: 'bot' }]);\r\n    const [input, setInput] = useState('');\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const [currentButtons, setCurrentButtons] = useState('default');\r\n    const [showDropdown, setShowDropdown] = useState(false);\r\n    const [selectedOption, setSelectedOption] = useState('');\r\n    const [options, setOptions] = useState([]);\r\n    const [isChatbotVisible, setIsChatbotVisible] = useState(true);\r\n    const [tableData, setTableData] = useState([]);\r\n    const messagesEndRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:5000/state-data')\r\n            .then((response) => {\r\n                if (!response.ok) throw new Error('Network response was not ok');\r\n                return response.json();\r\n            })\r\n            .then((data) => setOptions(data))\r\n            .catch((error) => console.error(\"Error fetching state data:\", error));\r\n    }, []);\r\n\r\n    const handleSend = () => {\r\n        if (input.trim()) {\r\n            const userMessage = { text: input, sender: 'user' };\r\n            setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n            setInput('');\r\n            simulateBotResponse(input);\r\n        }\r\n    };\r\n\r\n    const simulateBotResponse = (userInput) => {\r\n        setIsTyping(true);\r\n        setTimeout(() => {\r\n            const botMessage = {\r\n                text: getBotResponse(userInput),\r\n                sender: 'bot',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n            setIsTyping(false);\r\n\r\n            if (userInput === \"Exit\") {\r\n                setIsChatbotVisible(false);\r\n            } else if (userInput === \"Get a Ticket\") {\r\n                setShowDropdown(true);\r\n            } else if (buttonSets[userInput]) {\r\n                setCurrentButtons(userInput);\r\n                setShowDropdown(false);\r\n            }\r\n\r\n            if (userInput === \"Return to Main Menu\") {\r\n                setCurrentButtons('default');\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    const getBotResponse = (userInput) => {\r\n        return responses[userInput] || \"Sorry, I don't have that information. Can I help you with something else?\";\r\n    };\r\n\r\n    const quickReply = (reply) => {\r\n        const userMessage = { text: reply, sender: 'user' };\r\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n        simulateBotResponse(reply);\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const response = await fetch('http://localhost:5000/get-museum-data', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ state: selectedOption }),\r\n        });\r\n\r\n        if (!response.ok) throw new Error('Network response was not ok');\r\n        const data = await response.json();\r\n        setTableData(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    const renderButtons = () => {\r\n        return buttonSets[currentButtons]?.map((buttonText) => (\r\n            <button key={buttonText} onClick={() => quickReply(buttonText)}>{buttonText}</button>\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isChatbotVisible && (\r\n                <div className=\"chatbot-container\">\r\n                    <button\r\n                        className=\"close-chatbot\"\r\n                        onClick={() => setIsChatbotVisible(false)}\r\n                    >\r\n                        &times;\r\n                    </button>\r\n\r\n                    <div className=\"chat-window\">\r\n                        <div className=\"messages\">\r\n                            {messages.map((msg, index) => (\r\n                                <div key={index} className={msg.sender}>\r\n                                    {msg.text}\r\n                                </div>\r\n                            ))}\r\n                            {isTyping && <div className=\"bot typing\">Bot is typing...</div>}\r\n                            <div ref={messagesEndRef} />\r\n                        </div>\r\n                        <div className=\"quick-replies\">\r\n                            \r\n                            {renderButtons()}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {showDropdown && (\r\n                        <div className=\"dropdown-container\">\r\n                            <form onSubmit={handleSubmit}>\r\n                                <select\r\n                                    value={selectedOption}\r\n                                    onChange={(e) => setSelectedOption(e.target.value)}\r\n                                    className=\"form-control\"\r\n                                >\r\n                                    <option value=\"\" disabled>Select a state</option>\r\n                                    {options.map((option, index) => (\r\n                                        <option key={index} value={option}>{option}</option>\r\n                                    ))}\r\n                                </select>\r\n                                <center><button type=\"submit\" className=\"btn btn-primary mt-2\">Explore</button></center>\r\n                            </form>\r\n\r\n                            <div className='chatbot-container'>\r\n                                {tableData.length > 0 && (\r\n                                    <table className=\"table table-striped table-bordered mt-3\">\r\n                                        <thead className=\"thead-dark\">\r\n                                            <tr>\r\n                                                <th>Museum Name</th>\r\n                                                <th>Ticket Price</th>\r\n                                                <th>Book ticket</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {tableData.map((row) => (\r\n                                                <tr key={row._id}>\r\n                                                    <td>{row.nameofmuseum}</td>\r\n                                                    <td>{row.ticketprice}</td>\r\n                                                    <td>\r\n                                                        <button\r\n                                                            type=\"button\"\r\n                                                            onClick={() =>\r\n                                                                window.open(\r\n                                                                    `/form.html?price=${row.ticketprice}&museum=${encodeURIComponent(row.nameofmuseum)}`,\r\n                                                                    '_blank'\r\n                                                                )\r\n                                                            }\r\n                                                            className=\"btn btn-success btn-sm\"\r\n                                                        >\r\n                                                            Book Ticket\r\n                                                        </button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                        </tbody>\r\n                                    </table>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}