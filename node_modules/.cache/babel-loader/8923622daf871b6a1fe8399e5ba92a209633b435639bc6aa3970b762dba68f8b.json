{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\chatbot-interface\\\\src\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst responses = {\n  \"Get a Ticket\": \"Here’s the link to get your ticket: [Ticket Link]\",\n  \"Quick Guide\": \"You can find the quick guide here: [Guide Link]\",\n  \"Hello\": \"Hi there! How can I help you today?\",\n  \"Help\": \"Sure! What do you need help with?\",\n  \"Bye\": \"Goodbye! Have a great day!\",\n  \"Museum Timings\": \"The museum is open from 10 AM to 6 PM, every day.\",\n  \"Special Exhibits\": \"Currently, we have exhibits on Indian Art and History. Would you like to know more?\",\n  \"Cultural Heritage\": \"India has a rich cultural heritage, including classical dance forms, music, and art. Do you want to learn about a specific aspect?\",\n  \"Famous Monuments\": \"India is home to many famous monuments like the Taj Mahal, Qutub Minar, and Hampi. Would you like details on any of these?\",\n  \"Events This Month\": \"This month, we have a special exhibition on Mughal Architecture. It runs from the 15th to the 30th. Would you like to book a ticket?\"\n};\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [currentButtons, setCurrentButtons] = useState('default'); // State to track current buttons set\n  const messagesEndRef = useRef(null); // Create a ref for the messages container\n\n  const handleSend = () => {\n    if (input.trim()) {\n      const userMessage = {\n        text: input,\n        sender: 'user'\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      setInput('');\n      simulateBotResponse(input);\n    }\n  };\n  const simulateBotResponse = userInput => {\n    setIsTyping(true);\n    setTimeout(() => {\n      const botMessage = {\n        text: getBotResponse(userInput),\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n      setIsTyping(false);\n      if (userInput === 'Special Exhibits') {\n        // Example to show new buttons after specific response\n        setCurrentButtons('specialExhibits');\n      }\n    }, 1000);\n  };\n  const getBotResponse = userInput => {\n    return responses[userInput] || \"Sorry, I don't have that information. Can I help you with something else?\";\n  };\n  const quickReply = reply => {\n    const userMessage = {\n      text: reply,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    simulateBotResponse(reply);\n  };\n\n  // Scroll to the bottom of the messages when new messages are added\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n\n  // Render buttons based on current state\n  const renderButtons = () => {\n    if (currentButtons === 'default') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"Get a Ticket\"),\n          children: \"Get a Ticket\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"Museum Timings\"),\n          children: \"Museum Timings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"Special Exhibits\"),\n          children: \"Special Exhibits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"Cultural Heritage\"),\n          children: \"Cultural Heritage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"Famous Monuments\"),\n          children: \"Famous Monuments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"Events This Month\"),\n          children: \"Events This Month\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"Quick Guide\"),\n          children: \"Quick Guide\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"Hello\"),\n          children: \"Say Hello\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"Help\"),\n          children: \"Need Help\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"Bye\"),\n          children: \"Say Goodbye\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true);\n    } else if (currentButtons === 'specialExhibits') {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"Indian Art\"),\n          children: \"Indian Art\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"History\"),\n          children: \"History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => quickReply(\"Return\"),\n          children: \"Return to Main Menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: msg.sender,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bot typing\",\n          children: \"Bot is typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 34\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quick-replies\",\n        children: renderButtons()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n_s(Chatbot, \"m2rkWAUNrgOsqD/z5l1/mreLR+4=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","responses","Chatbot","_s","messages","setMessages","input","setInput","isTyping","setIsTyping","currentButtons","setCurrentButtons","messagesEndRef","handleSend","trim","userMessage","text","sender","prevMessages","simulateBotResponse","userInput","setTimeout","botMessage","getBotResponse","quickReply","reply","_messagesEndRef$curre","current","scrollIntoView","behavior","renderButtons","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","map","msg","index","ref","_c","$RefreshReg$"],"sources":["C:/Users/HP/chatbot-interface/src/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './Chatbot.css';\r\n\r\nconst responses = {\r\n    \"Get a Ticket\": \"Here’s the link to get your ticket: [Ticket Link]\",\r\n    \"Quick Guide\": \"You can find the quick guide here: [Guide Link]\",\r\n    \"Hello\": \"Hi there! How can I help you today?\",\r\n    \"Help\": \"Sure! What do you need help with?\",\r\n    \"Bye\": \"Goodbye! Have a great day!\",\r\n    \"Museum Timings\": \"The museum is open from 10 AM to 6 PM, every day.\",\r\n    \"Special Exhibits\": \"Currently, we have exhibits on Indian Art and History. Would you like to know more?\",\r\n    \"Cultural Heritage\": \"India has a rich cultural heritage, including classical dance forms, music, and art. Do you want to learn about a specific aspect?\",\r\n    \"Famous Monuments\": \"India is home to many famous monuments like the Taj Mahal, Qutub Minar, and Hampi. Would you like details on any of these?\",\r\n    \"Events This Month\": \"This month, we have a special exhibition on Mughal Architecture. It runs from the 15th to the 30th. Would you like to book a ticket?\",\r\n};\r\n\r\nconst Chatbot = () => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [input, setInput] = useState('');\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const [currentButtons, setCurrentButtons] = useState('default'); // State to track current buttons set\r\n    const messagesEndRef = useRef(null); // Create a ref for the messages container\r\n\r\n    const handleSend = () => {\r\n        if (input.trim()) {\r\n            const userMessage = { text: input, sender: 'user' };\r\n            setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n            setInput('');\r\n            simulateBotResponse(input);\r\n        }\r\n    };\r\n\r\n    const simulateBotResponse = (userInput) => {\r\n        setIsTyping(true);\r\n        setTimeout(() => {\r\n            const botMessage = {\r\n                text: getBotResponse(userInput),\r\n                sender: 'bot',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\r\n            setIsTyping(false);\r\n            if (userInput === 'Special Exhibits') { // Example to show new buttons after specific response\r\n                setCurrentButtons('specialExhibits');\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    const getBotResponse = (userInput) => {\r\n        return responses[userInput] || \"Sorry, I don't have that information. Can I help you with something else?\";\r\n    };\r\n\r\n    const quickReply = (reply) => {\r\n        const userMessage = { text: reply, sender: 'user' };\r\n        setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n        simulateBotResponse(reply);\r\n    };\r\n\r\n    // Scroll to the bottom of the messages when new messages are added\r\n    useEffect(() => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n\r\n    // Render buttons based on current state\r\n    const renderButtons = () => {\r\n        if (currentButtons === 'default') {\r\n            return (\r\n                <>\r\n                    <button onClick={() => quickReply(\"Get a Ticket\")}>Get a Ticket</button>\r\n                    <button onClick={() => quickReply(\"Museum Timings\")}>Museum Timings</button>\r\n                    <button onClick={() => quickReply(\"Special Exhibits\")}>Special Exhibits</button>\r\n                    <button onClick={() => quickReply(\"Cultural Heritage\")}>Cultural Heritage</button>\r\n                    <button onClick={() => quickReply(\"Famous Monuments\")}>Famous Monuments</button>\r\n                    <button onClick={() => quickReply(\"Events This Month\")}>Events This Month</button>\r\n                    <button onClick={() => quickReply(\"Quick Guide\")}>Quick Guide</button>\r\n                    <button onClick={() => quickReply(\"Hello\")}>Say Hello</button>\r\n                    <button onClick={() => quickReply(\"Help\")}>Need Help</button>\r\n                    <button onClick={() => quickReply(\"Bye\")}>Say Goodbye</button>\r\n                </>\r\n            );\r\n        } else if (currentButtons === 'specialExhibits') {\r\n            return (\r\n                <>\r\n                    <button onClick={() => quickReply(\"Indian Art\")}>Indian Art</button>\r\n                    <button onClick={() => quickReply(\"History\")}>History</button>\r\n                    <button onClick={() => quickReply(\"Return\")}>Return to Main Menu</button>\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chatbot-container\">\r\n            <div className=\"chat-window\">\r\n                <div className=\"messages\">\r\n                    {messages.map((msg, index) => (\r\n                        <div key={index} className={msg.sender}>\r\n                            {msg.text}\r\n                        </div>\r\n                    ))}\r\n                    {isTyping && <div className=\"bot typing\">Bot is typing...</div>}\r\n                    <div ref={messagesEndRef} /> {/* This is the end ref */}\r\n                </div>\r\n                <div className=\"quick-replies\">\r\n                    {renderButtons()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}